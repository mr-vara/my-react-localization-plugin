name: Auto Translate and PR

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-translate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install polib

      - name: Set branch name
        id: vars
        run: echo "BRANCH=auto/translated-$(date +%s)" >> $GITHUB_OUTPUT

      - name: Create new branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ steps.vars.outputs.BRANCH }}

      - name: Install Python dependencies
        run: |
          pip install requests polib

      - name: Translate PO and JSON files
        env:
          TRANSLATOR_API_KEY: ${{ secrets.TRANSLATOR_API_KEY }}
        run: |
          python <<EOF
          import os
          import json
          import re
          import requests
          import polib
          from pathlib import Path

          print("Translation started")

          def extract_lang_from_filename(filename):
              match = re.search(r'my-react-localization-plugin-([a-z]{2,3}(?:_[A-Z]{2})?)', filename)
              if match:
                  return match.group(1).replace('_', '-')
              return None

          def batch_translate(texts, to_lang):
              url = f"https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to={to_lang}"
              headers = {
                  "Ocp-Apim-Subscription-Key": os.environ["TRANSLATOR_API_KEY"],
                  "Content-Type": "application/json"
              }
              payload = [{"Text": text} for text in texts]
              response = requests.post(url, headers=headers, json=payload)
              response.raise_for_status()
              return [item["translations"][0]["text"] for item in response.json()]

          # Translate .po files
          for path in Path('.').rglob('*.po'):
              lang = extract_lang_from_filename(path.name)
              print(f"Language detected {lang}")
              if not lang:
                  continue

              po = polib.pofile(str(path))
              entries_to_translate = [
                  entry for entry in po
                  if not entry.msgstr.strip() and entry.msgid.strip()
              ]

              texts = []
              entry_map = []
              for entry in entries_to_translate:
                  if entry.msgctxt:
                      composed = f"{entry.msgid} ({entry.msgctxt})"
                      entry_map.append((entry, len(entry.msgid)))
                  else:
                      composed = entry.msgid
                      entry_map.append((entry, None))
                  texts.append(composed)

              if texts:
                  translated_texts = batch_translate(texts, lang)
                  for (entry, original_len), translated in zip(entry_map, translated_texts):
                      if original_len:
                          entry.msgstr = translated[:original_len].strip()
                      else:
                          entry.msgstr = translated.strip()
                  po.save()

          # Translate .json files
          for path in Path('.').rglob('*.json'):
              lang = extract_lang_from_filename(path.name)
              if not lang:
                  continue

              with open(path, 'r', encoding='utf-8') as f:
                  try:
                      content = json.load(f)
                  except json.JSONDecodeError:
                      continue

              if "locale_data" not in content or "messages" not in content["locale_data"]:
                  continue

              messages = content["locale_data"]["messages"]
              keys_to_translate = [key for key, val in messages.items() if key != "" and isinstance(val, list) and not val[0].strip()]

              if keys_to_translate:
                  translated_texts = batch_translate(keys_to_translate, lang)
                  for key, translated in zip(keys_to_translate, translated_texts):
                      messages[key] = [translated.strip()]
                  with open(path, 'w', encoding='utf-8') as f:
                      json.dump(content, f, ensure_ascii=False, indent=2)
          EOF

      - name: Commit changes
        run: |
          git add .
          git diff --cached --quiet || git commit -m "Auto-translated PO and JSON files"

      - name: Push changes to new branch
        run: git push origin ${{ steps.vars.outputs.BRANCH }}

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | gh auth login --with-token
          unset GITHUB_TOKEN
          gh pr create --title "Auto-translated files update" --body "This PR contains automatic translations of PO and JSON files." --base main --head ${{ steps.vars.outputs.BRANCH }}

      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     base: main
      #     branch: ${{ steps.vars.outputs.BRANCH }}
      #     title: "🔁 Auto-translate PO and JSON files"
      #     body: "This PR was automatically generated to translate newly added strings using Microsoft Translator API."
